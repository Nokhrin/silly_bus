package pop.lesson09;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Консольный трекер задач
 * ---
 * Трекер является системой управления задачами
 * ---
*  Сущность "Задача"
*   Минимальная единица, которой манипулирует трекер
 *  Задача содержит атрибуты
 *      - уникальный идентификатор / id
 *      - наименование
 *      - владелец
 *      - статус - выполнена/не выполнена
 *      - дата/время создания
 *      - дата/время начала выполнения
 *      - дата/время завершения выполнения
 *  ---
 *      - объект задачи является экземпляром класса LinkedHashMap
 *      - структура объекта задачи
 *          {"id", String},
 *          {"наименование", String},
 *          {"владелец", String},
 *          {"статус", boolean},
 *          {"дата/время создания", Date},
 *          {"дата/время начала выполнения", Date},
 *          {"дата/время завершения выполнения", Date},
 *      - ссылка на объект задачи существует только в области видимости метода main
 *          - не хранится в полях классов
 * ---
 * Задача поддерживает операции
 *      - создание
 *      - изменение
 *      - удаление
 *      - печать текстового представления
 * ---
 * Сущность "Список задач"
 *  Задачи объединяются в списки задач
 *      - объект Список задач является экземпляром класса LinkedHashMap
 *      - структура объекта Список задач
 *          {"id списка задач", String},
 *          {"имя списка задач", String},
 *          {"задачи", ArrayList[{Задача_1} , {Задача_2}, [...], {Задача_N}]}
 * ---
 * Список задач поддерживает операции
 *      - создание
 *      - изменение
 *      - удаление
 *      - печать текстового представления
 *      - запись в файл
 *      - чтение из файла
 * ---
 * Задача всегда включена в список задач
 * Все задачи включены в список "Все задачи"
 * ---
 * Договоренности
 *  стиль
 *      процедурный
 *      tdd
 *      для каждого метода существует юнит-тест
 *
 * пользовательский интерфейс
 *      командная строка
 *
 * Ввод/вывод
 *     - Меню через `Scanner` (п.4).
 *     - Сохранение в `tasks.csv` через `BufferedWriter` (п.8).
 *       *Обоснование*: Повторяем шаблоны из п.4 и п.8, но объединяем их.
 *
 * обработка ошибок
 *
 * управление зависимостями
 *      добавить пакет `slf4j`
 *
 * логирование
 *      применить `slf4j`
 *
 * Сборка
 *      имя пакета `tracker.jar`
 *      shell скрипт сборки
 *      сборка Maven
 *
 *
 * Критерии проверки
 * - При запуске `java -jar tracker.jar` выводится меню.
 * - Данные сохраняются в `tasks.csv` и загружаются при повторном запуске.
 * - Обработка ошибок: некорректный ввод числа, отсутствие файла.
 */
public class TaskTracker {
    private final Logger logger = LoggerFactory.getLogger(TaskTracker.class);

    private static void printMenu() {

    }

    public static void main(String[] args) {
        // меню

        // состав меню

        // чтение пользовательского ввода

        //
    }
}
